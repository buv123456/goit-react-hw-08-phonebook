{"version":3,"file":"static/js/319.a8f60386.chunk.js","mappings":"4OAEaA,EAAeC,EAAAA,KAAaC,MAAM,CAC7CC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,yHACA,0IAEDC,SAAS,YACZC,OAAQP,EAAAA,KACLG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,+EACA,gGAEDC,SAAS,cAGDE,EAAcR,EAAAA,KAAaC,MAAM,CAC5CQ,MAAOT,EAAAA,KAAaS,QAAQL,IAAI,KAAKE,SAAS,qBAC9CI,SAAUV,EAAAA,KACPG,IAAI,EAAG,sBACPC,IAAI,IAAK,iBACTE,SAAS,0BAGDK,EAAiBX,EAAAA,KAAaC,MAAM,CAC/CC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,yHACA,0IAEDC,SAAS,YACZG,MAAOT,EAAAA,KAAaS,QAAQL,IAAI,KAAKE,SAAS,YAC9CI,SAAUV,EAAAA,KACPG,IAAI,EAAG,sBACPC,IAAI,IAAK,iBACTE,SAAS,a,uJCnCRM,EAAgB,CACpBH,MAAO,GACPC,SAAU,IAGL,SAASG,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAO9B,OACE,SAAC,KAAD,CACEN,cAAeA,EACfO,SARiB,SAAC,EAAD,GAAyC,IAAtCV,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcU,EAAgB,EAAhBA,UAC3CN,GAASO,EAAAA,EAAAA,IAAM,CAAEZ,MAAAA,EAAOC,SAAAA,KACxBU,GACD,EAMGE,iBAAkBd,EAAAA,GAHpB,UAKE,UAAC,KAAD,YACE,sCAEE,SAAC,KAAD,CAAOe,KAAK,QAAQrB,KAAK,QAAQsB,YAAY,mBAC7C,SAAC,KAAD,CAActB,KAAK,QAAQuB,UAAU,YAEvC,yCAEE,SAAC,KAAD,CACEF,KAAK,WACLrB,KAAK,WACLsB,YAAY,wBAEd,SAAC,KAAD,CAActB,KAAK,WAAWuB,UAAU,YAE1C,mBAAQF,KAAK,SAASG,SAAUV,EAAhC,SACGA,GACC,SAAC,IAAD,CAASW,OAAQ,GAAIC,MAAO,OAAQC,OAAQ,EAAGC,SAAS,IAExD,eAMX,CCjDc,SAASC,IACtB,OACE,0BAIE,SAAClB,EAAD,KAGL,C,8ICVYmB,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAV,EACpBC,EAAiB,SAAAF,GAAK,OAAIA,EAAMG,SAASC,KAAnB,EAEtBnB,EAAkB,SAAAe,GAAK,OAAIA,EAAMG,SAASpB,SAAnB,EACvBsB,GAAyBC,EAAAA,EAAAA,IACpC,CAACJ,EAAgBH,IACjB,SAACK,EAAOH,GAAR,OACEG,EAAMH,QAAO,qBAAGhC,KAAH,EAASK,QACJiC,cAAcC,SAASP,EAAOM,cADnC,GADf,G","sources":["helpers/submitCheck.js","components/LoginForm.jsx","pages/Login.jsx","redux/contacts/selectors.js"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  number: Yup.string()\n    .min(2, 'Too Short!')\n    .max(30, 'Too Long!')\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const LoginSchema = Yup.object().shape({\n  email: Yup.string().email().max(255).required('Email is required'),\n  password: Yup.string()\n    .min(8, 'At least 8 symbols')\n    .max(255, \"It's too long\")\n    .required('Password is required'),\n});\n\nexport const RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  email: Yup.string().email().max(255).required('Required'),\n  password: Yup.string()\n    .min(8, 'At least 8 symbols')\n    .max(255, \"It's too long\")\n    .required('Required'),\n});\n","import { Formik, ErrorMessage, Field, Form } from 'formik';\nimport Spinner from 'react-spinner-material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LoginSchema } from 'helpers/submitCheck';\nimport { logIn } from 'redux/auth/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(logIn({ email, password }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={LoginSchema}\n    >\n      <Form>\n        <label>\n          Email\n          <Field type=\"email\" name=\"email\" placeholder=\"abc@email.com\" />\n          <ErrorMessage name=\"email\" component=\"div\" />\n        </label>\n        <label>\n          Password\n          <Field\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"at least 8 symbols\"\n          />\n          <ErrorMessage name=\"password\" component=\"div\" />\n        </label>\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? (\n            <Spinner radius={25} color={'#333'} stroke={3} visible={true} />\n          ) : (\n            'Log in'\n          )}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n","import { LoginForm } from 'components/LoginForm';\n// import { Helmet } from 'react-helmet-async';\n\nexport default function Login() {\n  return (\n    <div>\n      {/* <Helmet>\n        <title>Login</title>\n      </Helmet> */}\n      <LoginForm />\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) =>\n    items.filter(({ name, number }) =>\n      (name + number).toLowerCase().includes(filter.toLowerCase())\n    )\n);\n"],"names":["SignupSchema","Yup","shape","name","min","max","matches","required","number","LoginSchema","email","password","RegisterSchema","initialValues","LoginForm","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","onSubmit","resetForm","logIn","validationSchema","type","placeholder","component","disabled","radius","color","stroke","visible","Login","selectFilter","state","filter","selectContacts","contacts","items","selectFilteredContacts","createSelector","toLowerCase","includes"],"sourceRoot":""}