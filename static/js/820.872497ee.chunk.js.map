{"version":3,"file":"static/js/820.872497ee.chunk.js","mappings":"oNAqBaA,GAnBeC,EAAAA,KAAaC,MAAM,CAC7CC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,yHACA,0IAEDC,SAAS,YACZC,MAAOP,EAAAA,KACJG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,+EACA,gGAEDC,SAAS,cAGaN,EAAAA,KAAaC,MAAM,CAC5CO,MAAOR,EAAAA,KAAaQ,QAAQJ,IAAI,KAAKE,SAAS,qBAC9CG,SAAUT,EAAAA,KAAaI,IAAI,KAAKE,SAAS,2BAG9BI,EAAiBV,EAAAA,KAAaC,MAAM,CAC/CC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,yHACA,0IAEDC,SAAS,YACZE,MAAOR,EAAAA,KAAaQ,QAAQJ,IAAI,KAAKE,SAAS,YAC9CG,SAAUT,EAAAA,KAAaI,IAAI,KAAKE,SAAS,a,uJC7BrCK,EAAgB,CACpBT,KAAM,GACNM,MAAO,GACPC,SAAU,IAGL,SAASG,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAQ9B,OACE,SAAC,KAAD,CACEN,cAAeA,EACfO,SATiB,SAAC,EAAD,GAA+C,IAA5ChB,EAA2C,EAA3CA,KAAMM,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcU,EAAgB,EAAhBA,UACjDC,QAAQC,IAAInB,EAAMM,EAAOC,GACzBI,GAASS,EAAAA,EAAAA,IAAS,CAAEpB,KAAAA,EAAMM,MAAAA,EAAOC,SAAAA,KACjCU,GACD,EAMGI,iBAAkBb,EAAAA,GAHpB,UAKE,UAAC,KAAD,YACE,qCAEE,SAAC,KAAD,CAAOc,KAAK,OAAOtB,KAAK,OAAOuB,YAAY,qBAC3C,SAAC,KAAD,CAAcvB,KAAK,OAAOwB,UAAU,YAEtC,sCAEE,SAAC,KAAD,CAAOF,KAAK,QAAQtB,KAAK,QAAQuB,YAAY,mBAC7C,SAAC,KAAD,CAAcvB,KAAK,QAAQwB,UAAU,YAEvC,yCAEE,SAAC,KAAD,CAAOF,KAAK,WAAWtB,KAAK,WAAWuB,YAAY,cACnD,SAAC,KAAD,CAAcvB,KAAK,WAAWwB,UAAU,YAE1C,mBAAQF,KAAK,SAASG,SAAUZ,EAAhC,SACGA,GACC,SAAC,IAAD,CAASa,OAAQ,GAAIC,MAAO,OAAQC,OAAQ,EAAGC,SAAS,IAExD,iBAMX,C,cCpDc,SAASC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAACrB,EAAD,MAGL,C,sECPYK,EAAkB,SAAAiB,GAAK,OAAIA,EAAMC,SAASpB,SAAnB,GACEqB,EAAAA,EAAAA,IACpC,CAJ4B,SAAAF,GAAK,OAAIA,EAAMC,SAASE,KAAnB,EADP,SAAAH,GAAK,OAAIA,EAAMI,MAAV,IAM/B,SAACD,EAAOC,GAAR,OACED,EAAMC,QAAO,qBAAGpC,KAAH,EAASK,OACLgC,cAAcC,SAASF,EAAOC,cADlC,GADf,G","sources":["helpers/submitCheck.js","components/RegisterForm.jsx","pages/Register.jsx","redux/contacts/selectors.js"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  phone: Yup.string()\n    .min(2, 'Too Short!')\n    .max(30, 'Too Long!')\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const LoginSchema = Yup.object().shape({\n  email: Yup.string().email().max(255).required('Email is required'),\n  password: Yup.string().max(255).required('Password is required'),\n});\n\nexport const RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  email: Yup.string().email().max(255).required('Required'),\n  password: Yup.string().max(255).required('Required'),\n});\n","import { Formik, ErrorMessage, Field, Form } from 'formik';\nimport Spinner from 'react-spinner-material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RegisterSchema } from 'helpers/submitCheck';\nimport { register } from 'redux/auth/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    console.log(name, email, password);\n    dispatch(register({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={RegisterSchema}\n    >\n      <Form>\n        <label>\n          Name\n          <Field type=\"text\" name=\"name\" placeholder=\"Enter your name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </label>\n        <label>\n          Email\n          <Field type=\"email\" name=\"email\" placeholder=\"abc@email.com\" />\n          <ErrorMessage name=\"email\" component=\"div\" />\n        </label>\n        <label>\n          Password\n          <Field type=\"password\" name=\"password\" placeholder=\"password\" />\n          <ErrorMessage name=\"password\" component=\"div\" />\n        </label>\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? (\n            <Spinner radius={25} color={'#333'} stroke={3} visible={true} />\n          ) : (\n            'Register'\n          )}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n","import { RegisterForm } from 'components/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) =>\n    items.filter(({ name, phone }) =>\n      (name + phone).toLowerCase().includes(filter.toLowerCase())\n    )\n);\n"],"names":["LoginSchema","Yup","shape","name","min","max","matches","required","phone","email","password","RegisterSchema","initialValues","RegisterForm","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","onSubmit","resetForm","console","log","register","validationSchema","type","placeholder","component","disabled","radius","color","stroke","visible","Register","Helmet","state","contacts","createSelector","items","filter","toLowerCase","includes"],"sourceRoot":""}